- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False
  
  tasks:
    - name: Set pagename
      set_fact:
        pagename: jmtestpage5
    - name: Install AWSCLI
      pip: name=awscli state=present
    - name: Create acm cert request
      shell: >
        aws acm request-certificate --domain-name {{ pagename }}.jannes.mingram.net
        --validation-method DNS
        --subject-alternative-names www.{{ pagename }}.jannes.mingram.net
        --idempotency-token {{ pagename }}
        --region us-east-1
      register: cert
    - name: Safe cert details
      set_fact:
        acm_item_cert_arn: "{{ (cert.stdout|from_json).CertificateArn }}"
    - name: Create an Bucket
      s3_bucket:
        name: "{{ pagename }}"
        region: eu-central-1
      register: bucket_details
    - name: Configure bucket as website
      s3_website :
        name: "{{ pagename }}"
        region: eu-central-1
        error_key: index.html
        state: present
    - name: Upload files
      s3_sync:
        bucket: "{{ pagename }}"
        region: eu-central-1
        file_root: ../target/
        permission: public-read
        cache_control: "public, max-age=31536000"
        file_change_strategy: checksum
        mode: push
    - name: obtain all facts for a single ACM certificate
      aws_acm_facts:
        domain_name: "{{ pagename }}.jannes.mingram.net"
        region: us-east-1
      register: cert_details
    - name: Creat DNS entry 1
      uri:
        url: https://dns.api.gandi.net/api/v5/domains/mingram.net/records
        method: POST
        body: "{
             \"rrset_name\": \"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.name }}\",
             \"rrset_type\": \"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.type }}\",
             \"rrset_values\": [\"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.value }}\"],
             \"rrset_ttl\": 3600
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"
    - name: Creat DNS entry 2
      uri:
        url: https://dns.api.gandi.net/api/v5/domains/mingram.net/records
        method: POST
        body: "{
             \"rrset_name\": \"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.name }}\",
             \"rrset_type\": \"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.type }}\",
             \"rrset_values\": [\"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.value }}\"],
             \"rrset_ttl\": 3600
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"
    - name: Wait some second for dns to propagate
      wait_for: timeout=10
      delegate_to: localhost
    - name: Wait for cert grant
      shell: >
        aws acm wait certificate-validated --certificate-arn {{ (cert.stdout|from_json).CertificateArn }} --region us-east-1
    - name: Wait some second until certificate grant has propagated
      wait_for: timeout=10
      delegate_to: localhost
    - name: Setup cloudfront
      cloudfront_distribution:
        state: present
        enabled: no
        origins: 
          - s3_origin_access_identity_enabled: yes
            domain_name: "{{ pagename }}.s3.amazonaws.com"
            id: "{{ pagename }}"
        aliases: [ '{{ pagename }}.jannes.mingram.net', 'www.{{ pagename }}.jannes.mingram.net' ]
        viewer_certificate:
          acm_certificate_arn: "{{ (cert.stdout|from_json).CertificateArn }}"
          certificate : "{{ (cert.stdout|from_json).CertificateArn }}"
          certificate_source: acm
          ssl_support_method: sni-only
          minimum_protocol_version: "TLSv1.2_2018"
        default_root_object: index.html
        ipv6_enabled: yes
        custom_error_responses:
          - response_code: 200
            error_caching_min_ttl: 864000
            response_page_path: '/index.html'
            error_code: 403
          - response_code: 200
            error_caching_min_ttl: 864000
            response_page_path: '/index.html'
            error_code: 404
        tags:
          Name: example distribution
          Project: example project
          Priority: '1'
        default_cache_behavior:
          target_origin_id: "{{ pagename }}"
          compress: true
          viewer_protocol_policy: redirect-to-https
          forwarded_values:
            query_string: false
            cookies:
              forward: none
          allowed_methods:
            items:
              - GET
              - HEAD
            cached_methods:
              - GET
              - HEAD
    - name: Obtain cloudfront url for cname
      register: cloudfront_details
      cloudfront_facts:
        distribution: true
        domain_name_alias: www.{{ pagename }}.jannes.mingram.net
    - name: DEBUG
      debug:
        var: cloudfront_details
    - name: DEBUG
      debug:
        var: ansible_facts['cloudfront']['{{ pagename }}.jannes.mingram.net']
    - name: DEBUG DOMAIN
      debug:
        msg: "{{ cloudfront_details.ansible_facts.cloudfront[{{ pagename }}.jannes.mingram.net].Distribution.DomainName }}"

        
        
