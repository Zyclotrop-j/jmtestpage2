- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False
  
  tasks:
    - name: Set pagename variable
      set_fact:
        pagename: deadbears
    - name: Set suffix variable
      set_fact:
        suffix: de
    - name: Set dnsname variable
      set_fact:
        dnsname: deadbears.de
    - name: Install AWSCLI
      pip: name=awscli state=present
    - name: Install boto
      pip: name=boto state=present
    - name: Install boto3
      pip: name=boto3 state=present
    - name: Install botocore
      pip: name=botocore state=present

    - name: obtain all facts for a single ACM certificate
      aws_acm_facts:
        domain_name: "{{ pagename }}.{{ suffix }}"
        region: us-east-1
      register: cert_details_0
    - name: Create acm cert request
      when: cert_details_0.certificates[0] is not defined
      shell: >
        aws acm request-certificate --domain-name {{ pagename }}.{{ suffix }}
        --validation-method DNS
        --subject-alternative-names www.{{ pagename }}.{{ suffix }}
        --idempotency-token {{ pagename }}
        --region us-east-1
      register: cert
    - name: Safe cert details (new cert)
      when: cert_details_0.certificates[0] is not defined
      set_fact:
        acm_item_cert_arn: "{{ (cert.stdout|from_json).CertificateArn }}"
    - name: Safe cert details (old cert)
      when: cert_details_0.certificates[0] is defined
      set_fact:
        acm_item_cert_arn: "{{ cert_details_0.certificates[0].certificate_arn }}"
    - name: Create an Bucket
      s3_bucket:
        name: "{{ pagename }}"
        region: eu-central-1
      register: bucket_details
    - name: Configure bucket as website
      s3_website :
        name: "{{ pagename }}"
        region: eu-central-1
        error_key: 404.html
        state: present
    - name: Upload files
      s3_sync:
        bucket: "{{ pagename }}"
        region: eu-central-1
        file_root: ../target/
        permission: public-read
        cache_control: "public, max-age=31536000, immutable"
        file_change_strategy: checksum
        mode: push
        include: "*"
        exclude: ".*,*.html,icon-*.png,idb-keyval-iife.min.js,sw.js,chunk-map.json,manifest.webmanifest,robots.txt,sitemap.xml,webpack.stats.json"
    - name: Upload files
      s3_sync:
        bucket: "{{ pagename }}"
        region: eu-central-1
        file_root: ../target/
        permission: public-read
        cache_control: "public, max-age=600, stale-while-revalidate=300"
        file_change_strategy: checksum
        mode: push
        include: "*.html,icon-*.png,idb-keyval-iife.min.js,sw.js,chunk-map.json,manifest.webmanifest,robots.txt,sitemap.xml,webpack.stats.json"
        exclude: ".*"
    - name: PUT sw.js with different meta data
      aws_s3:
        bucket: "{{ pagename }}"
        object: /sw.js
        src: ../target/sw.js
        permission: public-read
        mode: put
        region: eu-central-1
        encrypt: no
        metadata: 'Cache-Control="public, max-age=1200, stale-while-revalidate=600"'
    - name: obtain all facts for a single ACM certificate
      aws_acm_facts:
        domain_name: "{{ pagename }}.{{ suffix }}"
        region: us-east-1
      register: cert_details
    - name: Creat DNS entry 1
      uri:
        url: "https://dns.api.gandi.net/api/v5/domains/{{ dnsname }}/records"
        method: POST
        body: "{
             \"rrset_name\": \"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.name }}\",
             \"rrset_type\": \"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.type }}\",
             \"rrset_values\": [\"{{ cert_details.certificates[0].domain_validation_options[0].resource_record.value }}\"],
             \"rrset_ttl\": 3600
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"
    - name: Creat DNS entry 2
      uri:
        url: "https://dns.api.gandi.net/api/v5/domains/{{ dnsname }}/records"
        method: POST
        body: "{
             \"rrset_name\": \"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.name }}\",
             \"rrset_type\": \"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.type }}\",
             \"rrset_values\": [\"{{ cert_details.certificates[0].domain_validation_options[1].resource_record.value }}\"],
             \"rrset_ttl\": 3600
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"
    - name: Wait some second for dns to propagate
      wait_for: timeout=10
      delegate_to: localhost
    - name: Wait for cert grant
      shell: >
        aws acm wait certificate-validated --certificate-arn {{ acm_item_cert_arn }} --region us-east-1
    - name: Wait some second until certificate grant has propagated
      wait_for: timeout=10
      delegate_to: localhost
    - name: Setup cloudfront
      cloudfront_distribution:
        state: present
        enabled: yes
        origins: 
          - domain_name: "{{ pagename }}.s3-website.eu-central-1.amazonaws.com"
            id: "{{ pagename }}"
        aliases: [ '{{ pagename }}.{{ suffix }}', 'www.{{ pagename }}.{{ suffix }}' ]
        viewer_certificate:
          acm_certificate_arn: "{{ acm_item_cert_arn }}"
          certificate : "{{ acm_item_cert_arn }}"
          certificate_source: acm
          ssl_support_method: sni-only
          minimum_protocol_version: "TLSv1.2_2018"
        default_root_object: index.html
        ipv6_enabled: yes
        custom_error_responses:
          - response_code: 404
            error_caching_min_ttl: 3600
            response_page_path: '/404.html'
            error_code: 403
          - response_code: 404
            error_caching_min_ttl: 3600
            response_page_path: '/404.html'
            error_code: 404
        tags:
          Name: "{{ pagename }}-{{ lookup('env','CIRCLE_BRANCH') }}-{{ lookup('env','CIRCLE_BUILD_NUM') }}"
          Version: "{{ pagename }}-{{ lookup('env','CIRCLE_SHA1') }}"
          Git: "{{ lookup('env','CIRCLE_REPOSITORY_URL') }}"
        default_cache_behavior:
          target_origin_id: "{{ pagename }}"
          compress: true
          viewer_protocol_policy: redirect-to-https
          lambda_function_associations:
            - lambda_function_arn: arn:aws:lambda:us-east-1:157114673671:function:addSecurityHeaders:3
              event_type: origin-response
          forwarded_values:
            query_string: false
            cookies:
              forward: none
          allowed_methods:
            items:
              - GET
              - HEAD
            cached_methods:
              - GET
              - HEAD
    - name: Obtain cloudfront url for cname
      register: cloudfront_details
      cloudfront_facts:
        distribution: true
        domain_name_alias: www.{{ pagename }}.{{ suffix }}
    - name: Switch dns entry over (www)
      uri:
        url: "https://dns.api.gandi.net/api/v5/domains/{{ dnsname }}/records"
        method: POST
        body: "{
             \"rrset_name\": \"www.{{ pagename }}.{{ suffix }}.\",
             \"rrset_type\": \"CNAME\",
             \"rrset_values\": [\"{{ ansible_facts['cloudfront'][pagename + '.' + suffix].Distribution.DomainName }}.\"],
             \"rrset_ttl\": 86400
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"
    - name: Wait some second for dns to propagate
      wait_for: timeout=10
      delegate_to: localhost
    - name: Switch dns entry over (no www)
      uri:
        url: https://dns.api.gandi.net/api/v5/domains/{{ dnsname }}/records
        method: POST
        body: "{
             \"rrset_name\": \"{{ pagename }}.{{ suffix }}.\",
             \"rrset_type\": \"CNAME\",
             \"rrset_values\": [\"{{ ansible_facts['cloudfront'][pagename + '.' + suffix].Distribution.DomainName }}.\"],
             \"rrset_ttl\": 86400
             }"
        status_code: 201, 200
        body_format: json
        headers:
          Content-Type: "application/json"
          X-Api-Key: "{{ lookup('env','GANDI') }}"     
        
